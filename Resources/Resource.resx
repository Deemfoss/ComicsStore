<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutUs" xml:space="preserve">
    <value>About Us</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="AddressF" xml:space="preserve">
    <value>3506 Rindle Ct, Charlotte</value>
  </data>
  <data name="AddToCart" xml:space="preserve">
    <value>Add to cart</value>
  </data>
  <data name="Arrange" xml:space="preserve">
    <value>You can also arrange pickup.</value>
  </data>
  <data name="ArrangeDelivery" xml:space="preserve">
    <value>To arrange delivery, when placing an order, select the menu item Delivery by courier</value>
  </data>
  <data name="Buy" xml:space="preserve">
    <value>Buy</value>
  </data>
  <data name="BuyComicsOffline" xml:space="preserve">
    <value>You can come and buy comics in our online store that runs daily from 12:00 to 20:00</value>
  </data>
  <data name="Cart" xml:space="preserve">
    <value>Cart</value>
  </data>
  <data name="ContactInf" xml:space="preserve">
    <value>Contact information</value>
  </data>
  <data name="ContInf" xml:space="preserve">
    <value>Contact Information</value>
  </data>
  <data name="Couriedeliverys" xml:space="preserve">
    <value>Courier delivery</value>
  </data>
  <data name="CourierDelivery" xml:space="preserve">
    <value>We have courier delivery in Minsk.</value>
  </data>
  <data name="DeliveryandPayment" xml:space="preserve">
    <value>Delivery and payment of comics</value>
  </data>
  <data name="DeliveryDescription" xml:space="preserve">
    <value>Our store wants to provide its customers with maximum comfort. We understand that sometimes it’s not very convenient to get to our stores if you live far away or have no free time. Therefore, we have provided the ability to deliver your favorite comics directly to your home.</value>
  </data>
  <data name="DeliveryNextDay" xml:space="preserve">
    <value>Delivery is carried out the day after the order.</value>
  </data>
  <data name="DeliveryPrice" xml:space="preserve">
    <value>Shipping cost 7$</value>
  </data>
  <data name="DeliveryTime" xml:space="preserve">
    <value>Delivery is carried out within a week from the date of placing the order</value>
  </data>
  <data name="DeliveryToBelarus" xml:space="preserve">
    <value>Delivery to US</value>
  </data>
  <data name="DescriptonStore" xml:space="preserve">
    <value>The first fake comic book store in Minsk. We specialize in selling comics DC, Marvel, Vertigo, as well as Russian comics. We have delivery in Minsk and throughout Belarus. More detailed information can be found in the delivery and payment section. We only sell licensed and certified comics. We do not sell counterfeit products, comics with fan translation, etc.</value>
  </data>
  <data name="Detail" xml:space="preserve">
    <value>Detail</value>
  </data>
  <data name="HomePage" xml:space="preserve">
    <value>Home Page</value>
  </data>
  <data name="HowBuyComics" xml:space="preserve">
    <value>How to buy comics if I live in Minsk</value>
  </data>
  <data name="Mail" xml:space="preserve">
    <value>Mail</value>
  </data>
  <data name="ManagerCall" xml:space="preserve">
    <value>The manager will call you back after placing the order and specify the delivery time.</value>
  </data>
  <data name="Ourlocation" xml:space="preserve">
    <value>Our location</value>
  </data>
  <data name="PaymentType" xml:space="preserve">
    <value>Payment is made in cash to the courier</value>
  </data>
  <data name="PostOfficeDelivery" xml:space="preserve">
    <value>You will receive a mail notification, after which you will need to contact your post office to make payment and pick up the order.</value>
  </data>
  <data name="PostOfficeDeliveryType" xml:space="preserve">
    <value>To make delivery, when ordering, select the menu item Delivery by post office</value>
  </data>
  <data name="PostOfficeManager" xml:space="preserve">
    <value>The manager will call you back after placing an order to clarify the data.</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="Publishment" xml:space="preserve">
    <value>Publishment</value>
  </data>
  <data name="Releasedate" xml:space="preserve">
    <value>Release date</value>
  </data>
  <data name="ShipAPay" xml:space="preserve">
    <value>Shipping and payment</value>
  </data>
  <data name="SorotbyL" xml:space="preserve">
    <value>Sort by low price</value>
  </data>
  <data name="SortbyH" xml:space="preserve">
    <value>Sort by height price</value>
  </data>
  <data name="StoreName" xml:space="preserve">
    <value>Comics Store</value>
  </data>
  <data name="Telephone" xml:space="preserve">
    <value>Telephone</value>
  </data>
  <data name="WorkTime" xml:space="preserve">
    <value>Working hours</value>
  </data>
  <data name="WorkTimeF" xml:space="preserve">
    <value>Seven days a week from 12:00 to 20:00</value>
  </data>
</root>